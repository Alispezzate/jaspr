name: jaspr_workspace
repository: https://github.com/schultek/jaspr

command:
  bootstrap:
    hooks:
      post: |
        dart pub global activate packages/jaspr_cli --source=path

packages:
  - packages/*
  - apps/*
  - examples/*
  - experiments/*
  - thirdparty/*

scripts:
  format:
    run: |
      melos exec --ignore=jaspr_cli -- "dart format . --line-length=120 --set-exit-if-changed"
      melos exec --scope=jaspr_cli -- "dart format lib  --line-length=120 --set-exit-if-changed"
  analyze: melos exec -- "dart analyze . --fatal-infos"
  test:
    run: |
      melos exec --scope=jaspr -- "dart test" &&
      melos exec --scope=jaspr_riverpod -- "dart test" &&
      melos exec --scope=jaspr_router -- "dart test"
  coverage:ci:
    run: |
      melos exec --scope=jaspr -- "dart test --coverage=coverage" &&
      melos exec --scope=jaspr_riverpod -- "dart test --coverage=coverage" &&
      melos exec --scope=jaspr_router -- "dart test --coverage=coverage" &&
      melos exec --no-private -- "dart pub global run coverage:format_coverage --check-ignore --report-on=lib --lcov -o "$MELOS_ROOT_PATH/coverage/$(echo "\$MELOS_PACKAGE_NAME")_lcov.info" -i ./coverage" &&
      find $MELOS_ROOT_PATH/coverage -type f -empty -print -delete
  coverage:cli:variant:
    run: |
      cd packages/jaspr_cli &&
      dart test --coverage=coverage --tags="$VARIANT" &&
      dart pub global run coverage:format_coverage --check-ignore --report-on=lib --lcov -o "../../coverage/jaspr_cli_$(echo $VARIANT)_lcov.info" -i ./coverage
  coverage:
    run: |
      melos run coverage:ci
      genhtml --ignore-errors unmapped -p $MELOS_ROOT_PATH/packages -o $MELOS_ROOT_PATH/coverage/report $MELOS_ROOT_PATH/coverage/*_lcov.info
      open $MELOS_ROOT_PATH/coverage/report/index.html
  generate:build:
    packageFilters:
      dependsOn: build_runner
    run: |
      melos exec --depends-on=build_runner -- "dart run build_runner build --delete-conflicting-outputs"
  generate:html:
    run: |
      cd packages/jaspr
      dart run tool/generate_html.dart
  generate:scaffold:
    run: |
      cd packages/jaspr_cli
      dart run tool/generate_scaffold.dart
  generate:versions:
    run: |
      cd packages/jaspr_cli
      dart run tool/generate_versions.dart
  activate:cli:
    run: |
      dart pub global activate packages/jaspr_cli --source=path
  deploy:jasprpad:
    run: |
      dart run apps/jaspr_pad/tool/deploy.dart
